{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/giiku-camp-vol7-2022/","result":{"data":{"site":{"siteMetadata":{"title":"ajfAfg's Blog"}},"markdownRemark":{"id":"c2698ed5-efe5-5be1-a3a9-662476547d57","excerpt":"技育 CAMP ハッカソン vol.7に参加しました．前回から約 1 ヶ月ぶりの参加です．今回は個人での参加だったので，チーム名が二人ユニットから一人ユニットに退化してしまいました．かなしみ． とりあえず成果物の発表スライド． パンチカードを作りました！！！　Visual Studio…","html":"<p><a href=\"https://talent.supporterz.jp/events/3207890b-4b45-46f6-881b-e761a919cbe1/\">技育 CAMP ハッカソン vol.7</a>に参加しました．<a href=\"../giiku-camp-vol5-2022\">前回</a>から約 1 ヶ月ぶりの参加です．今回は個人での参加だったので，チーム名が二人ユニットから一人ユニットに退化してしまいました．かなしみ．</p>\n<p>とりあえず成果物の発表スライド．</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 59.27083333333333%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRUZaL9QFT-tDAP4fqaN_OGuckstUbYwyJhPw0mwrVSHZgaKR8iauKAD6S385s15vyYAUWRybojNPgo/embed?start=false&amp;loop=false&amp;delayms=3000\" frameborder=\"0\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p><strong>パンチカード</strong>を作りました！！！　<a href=\"https://marketplace.visualstudio.com/items?itemName=ajfAfg.punched-card\">Visual Studio マーケットプレイス</a>にて公開中なのでぜひ遊んでみてください！</p>\n<p>また，今回は<a href=\"https://twitter.com/geek_pjt/status/1556208824687947776?s=21&#x26;t=hvh0cHoG8oOvWvENKLaToQ\">優秀賞</a>をいただきました！　ありがとうございます！！</p>\n<h2>仕様</h2>\n<ul>\n<li>文字コードは ASCII コード</li>\n<li>1 カラム 1 文字</li>\n<li>40 字/枚</li>\n</ul>\n<p>間違った箇所に穴を開けるともう戻せないのも仕様です（VSCode の Undo を使えば一応戻せる）．</p>\n<h2>動機</h2>\n<p>ウケ狙いです．</p>\n<p>もう少し真面目に書くと，テーマとして無駄開発を選択したのは，これまで比較的真面目に作品を作ってきてて，そろそろふざけたかったからです．パンチカードというアイデアを採用したのは，プログラミング言語自体が好きなので，プログラミング言語と関連したアイデアで何か作りたかったからです．</p>\n<h3>なんで VSCode の拡張機能として作ったの</h3>\n<p>最初は Jupyter Notebook のような形で実装し，ブラウザで動かすことを考えていました．しかし，特にファイルの同期を考え出すと結構しんどかったので，その辺りの面倒を見てくれる VSCode 上で動かすことにしました．VSCode の拡張機能だと本アプリを手元でお試ししやすいだろう，みたいな期待も少しあります．</p>\n<h2>技術的な話</h2>\n<p>今回のハッカソンで挑戦したことは，スライドにも書いた以下の 2 つです．</p>\n<ol>\n<li>VSCode の拡張機能の開発</li>\n<li>拡張機能の中で React を動かす</li>\n</ol>\n<p>ここでは 2 を少し深掘ってみます．</p>\n<h3>Custom Editor</h3>\n<p>VSCode の拡張機能を作るための API がいくつか提供されているのですが，今回作ったものは主に <a href=\"https://code.visualstudio.com/api/extension-guides/custom-editors\">Custom Editor API</a> を使っています．Custom Editor API を使うことで，VSCode の中にもう一つのファイル編集ソフトを立ち上げるみたいなことができます．例えば，<a href=\"https://github.com/microsoft/vscode-extension-samples/tree/main/custom-editor-sample\">このサンプル</a>のように，画像に落書きする画面を作ったりできます．なお，この画面は HTML/CSS/JavaScript で作ります（詳細は <a href=\"https://code.visualstudio.com/api/extension-guides/webview#scripts-and-message-passing\">Webview API</a>）．拡張機能もまた JavaScript で記述されます．</p>\n<h3>直接 DOM を触りとうない</h3>\n<p>画面を HTML/CSS/JavaScript で作るということで，動的に画面を変更する場合は DOM をイジる必要があるのですが，React を知ってしまった今ではとてもそんなことできません．バグらせる自信しかない（React を使ってもバグらせるけど）．</p>\n<p>という訳で VSCode の中でも React を動かしたいんですが，ビルドに少し難があります．というのも，全ての JavaScript ファイルを一つにまとめられないという問題があります．この理由は，拡張機能用の JavaScript ファイルが実行されたのちに，画面用の JavaScript ファイルが読み込まれる必要があるからです．以上から拡張機能用と画面用でそれぞれ分けてビルドする必要があり，Webpack の設定を頑張ってなんとかしました．一時沼りかけてたのでマジでなんとかなってよかった……</p>\n<h2>Future Work</h2>\n<p>アイデアが結構気に入っているので，細かい部分を改善してきたいと考えています．例えば，今は本拡張機能をインストールしていると全ファイルが問答無用でパンチカード化されるというなかなか治安の悪い挙動をしているので，コマンドを実行した時などの特定のタイミングでのみパンチカード化したいです．</p>\n<h2>まとめ</h2>\n<p>出オチ感満載の無駄作品を作れてとても満足です．「めちゃくちゃ無駄だね〜」と言われた時はもうすごい嬉しかったです．無駄開発最高！</p>\n<p>でも裏目標の「最優秀賞を取る」が達成できなかったのは悔しいです．もっと精進せねば．夏の間で力をつけて次回こそは！</p>","frontmatter":{"title":"技育CAMPハッカソン vol.7 に参加しました","date":"August 15, 2022","description":null}},"previous":{"fields":{"slug":"/giiku-camp-vol5-2022/"},"frontmatter":{"title":"技育CAMPハッカソン vol.5 に参加しました"}},"next":null},"pageContext":{"id":"c2698ed5-efe5-5be1-a3a9-662476547d57","previousPostId":"29ad8865-cb66-5b9b-82d8-bea8dca707d3","nextPostId":null}},"staticQueryHashes":["3257411868","984448874"]}